basePath: /
definitions:
  apicommon.LoginResponse:
    properties:
      expirity:
        type: string
      token:
        type: string
    type: object
  apicommon.OrganizationAddresses:
    properties:
      addresses:
        items:
          type: string
        type: array
    type: object
  apicommon.OrganizationInfo:
    properties:
      active:
        type: boolean
      address:
        type: string
      color:
        type: string
      communications:
        type: boolean
      counters:
        $ref: '#/definitions/apicommon.SubscriptionUsage'
      country:
        type: string
      createdAt:
        type: string
      parent:
        $ref: '#/definitions/apicommon.OrganizationInfo'
      size:
        type: string
      subdomain:
        type: string
      subscription:
        $ref: '#/definitions/apicommon.SubscriptionDetails'
      timezone:
        type: string
      type:
        type: string
      website:
        type: string
    type: object
  apicommon.SubscriptionDetails:
    properties:
      active:
        type: boolean
      email:
        type: string
      lastPaymentDate:
        type: string
      maxCensusSize:
        type: integer
      planID:
        type: integer
      renewalDate:
        type: string
      startDate:
        type: string
    type: object
  apicommon.SubscriptionUsage:
    properties:
      members:
        type: integer
      processes:
        type: integer
      sentEmails:
        type: integer
      sentSMS:
        type: integer
      subOrgs:
        type: integer
    type: object
  apicommon.UserInfo:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      organizations:
        items:
          $ref: '#/definitions/apicommon.UserOrganization'
        type: array
      password:
        type: string
      verified:
        type: boolean
    type: object
  apicommon.UserOrganization:
    properties:
      organization:
        $ref: '#/definitions/apicommon.OrganizationInfo'
      role:
        type: string
    type: object
  apicommon.UserPasswordReset:
    properties:
      code:
        type: string
      email:
        type: string
      newPassword:
        type: string
    type: object
  apicommon.UserPasswordUpdate:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    type: object
  apicommon.UserVerification:
    properties:
      code:
        type: string
      email:
        type: string
      expiration:
        type: string
      valid:
        type: boolean
    type: object
  errors.Error:
    properties:
      code:
        description: Error code
        type: integer
      err:
        description: Original error
      httpstatus:
        description: HTTP status code to return
        type: integer
      logLevel:
        description: Log level for this error (defaults to "debug")
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: info@vocdoni.io
    name: API Support
    url: https://vocdoni.io
  description: API for Vocdoni SaaS Backend
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Vocdoni SaaS API
  version: "1.0"
paths:
  /auth/addresses:
    get:
      consumes:
      - application/json
      description: Get the list of organization addresses where the user has write
        access
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationAddresses'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: No organizations found
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get writable organization addresses
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and get a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Login to get a JWT token
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh the JWT token for an authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Refresh JWT token
      tags:
      - auth
  /users:
    post:
      consumes:
      - application/json
      description: Register a new user with email, password, and personal information
      parameters:
      - description: User registration information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Register a new user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get information about the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.UserInfo'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get user information
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update information for the authenticated user
      parameters:
      - description: User information to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.LoginResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - users
  /users/password:
    put:
      consumes:
      - application/json
      description: Update the password for the authenticated user
      parameters:
      - description: Password update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserPasswordUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized or old password does not match
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - users
  /users/recovery:
    post:
      consumes:
      - application/json
      description: Request a password recovery code for a user
      parameters:
      - description: User email information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Recover user password
      tags:
      - users
  /users/reset:
    post:
      consumes:
      - application/json
      description: Reset a user's password using a verification code
      parameters:
      - description: Password reset information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserPasswordReset'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized or invalid verification code
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Reset user password
      tags:
      - users
  /users/verify:
    post:
      consumes:
      - application/json
      description: Verify a user account with the verification code
      parameters:
      - description: Verification information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserVerification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.LoginResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "409":
          description: User already verified
          schema:
            $ref: '#/definitions/errors.Error'
        "410":
          description: Verification code expired
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Verify user account
      tags:
      - users
  /users/verify/code:
    get:
      consumes:
      - application/json
      description: Get information about a user's verification code
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.UserVerification'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/errors.Error'
        "409":
          description: User already verified
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get verification code information
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Resend a verification code to the user's email
      parameters:
      - description: User email information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserVerification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "409":
          description: User already verified or verification code still valid
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Resend verification code
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
