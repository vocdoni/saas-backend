basePath: /
definitions:
  api.AddProcessesToBundleRequest:
    properties:
      processes:
        description: Array of process creation requests to add
        items:
          type: string
        type: array
    type: object
  apicommon.AcceptOrganizationInvitation:
    properties:
      code:
        description: Invitation code
        type: string
      user:
        allOf:
        - $ref: '#/definitions/apicommon.UserInfo'
        description: User information for registration or identification
    type: object
  apicommon.AddMembersJobResponse:
    properties:
      added:
        description: Number of members added
        type: integer
      errors:
        description: Errors encountered during job
        items:
          type: string
        type: array
      progress:
        description: Progress equals Added / Total * 100
        type: integer
      total:
        description: Total members in this job
        type: integer
    type: object
  apicommon.AddMembersRequest:
    properties:
      members:
        description: List of members to add
        items:
          $ref: '#/definitions/apicommon.OrgMember'
        type: array
    type: object
  apicommon.AddMembersResponse:
    properties:
      added:
        description: Number of members added
        type: integer
      errors:
        description: Errors encountered during job
        items:
          type: string
        type: array
      jobId:
        description: Job ID for tracking the addition process
        example: deadbeef
        format: hex
        type: string
    type: object
  apicommon.CensusParticipantsResponse:
    properties:
      censusId:
        description: Unique identifier for the census
        type: string
      memberIds:
        description: List of member IDs of the participants
        items:
          type: string
        type: array
    type: object
  apicommon.CreateCensusRequest:
    properties:
      authFields:
        description: Optional for defining which member data should be used for authentication
        items:
          $ref: '#/definitions/db.OrgMemberAuthField'
        type: array
      orgAddress:
        description: Organization address
        items:
          type: integer
        type: array
      twoFaFields:
        description: Optional for defining which member data should be used for two-factor
          authentication
        items:
          $ref: '#/definitions/db.OrgMemberTwoFaField'
        type: array
    type: object
  apicommon.CreateCensusResponse:
    properties:
      id:
        description: Unique identifier for the census
        type: string
    type: object
  apicommon.CreateOrganizationMemberGroupRequest:
    properties:
      description:
        description: Description of the group
        type: string
      includeAllMembers:
        description: Include all members of the organization in the group
        type: boolean
      memberIds:
        description: The IDs of the members to add to the group (optional if IncludeAllMembers
          is true)
        items:
          type: string
        type: array
      title:
        description: Title of the group
        type: string
    type: object
  apicommon.CreateOrganizationTicketRequest:
    properties:
      description:
        description: Body of the ticket
        type: string
      title:
        description: Title of the ticket
        type: string
      type:
        description: Type of the ticket to create (definded externally)
        type: string
    type: object
  apicommon.CreateProcessBundleRequest:
    properties:
      censusId:
        description: Census ID
        type: string
      processes:
        description: List of process IDs to include in the bundle
        items:
          type: string
        type: array
    type: object
  apicommon.CreateProcessBundleResponse:
    properties:
      root:
        description: Merkle root of the process bundle
        example: deadbeef
        format: hex
        type: string
      uri:
        description: URI of the created process bundle
        type: string
    type: object
  apicommon.CreateProcessRequest:
    properties:
      censusId:
        description: Census ID
        example: deadbeef
        format: hex
        type: string
      censusRoot:
        description: Merkle root of the published census
        example: deadbeef
        format: hex
        type: string
      censusUri:
        description: URI of the published census
        type: string
      metadata:
        description: |-
          Additional metadata for the process
          Can be any key-value pairs
        example: aGVsbG8gd29ybGQ=
        format: base64
        type: string
    type: object
  apicommon.DeleteMembersRequest:
    properties:
      all:
        description: Delete all members of the organization
        type: boolean
      ids:
        description: List of member internal ids numbers to delete (optional if All
          is true)
        items:
          type: string
        type: array
    type: object
  apicommon.DeleteMembersResponse:
    properties:
      count:
        description: Number of members deleted
        type: integer
    type: object
  apicommon.JobInfo:
    properties:
      added:
        description: Items successfully processed
        type: integer
      completed:
        description: Whether the job is completed
        type: boolean
      completedAt:
        description: Job completion timestamp (zero if not completed)
        type: string
      createdAt:
        description: Job creation timestamp
        type: string
      errors:
        description: List of errors encountered
        items:
          type: string
        type: array
      jobId:
        description: Unique job identifier
        type: string
      total:
        description: Total items to process
        type: integer
      type:
        allOf:
        - $ref: '#/definitions/db.JobType'
        description: Type of job
    type: object
  apicommon.JobsResponse:
    properties:
      currentPage:
        description: Current page number
        type: integer
      jobs:
        description: List of jobs
        items:
          $ref: '#/definitions/apicommon.JobInfo'
        type: array
      totalPages:
        description: Total number of pages
        type: integer
    type: object
  apicommon.ListOrganizationMemberGroupResponse:
    properties:
      currentPage:
        description: Current page number
        type: integer
      members:
        description: List of organization group members
        items:
          $ref: '#/definitions/apicommon.OrgMember'
        type: array
      totalPages:
        description: Total number of pages
        type: integer
    type: object
  apicommon.LoginResponse:
    properties:
      expirity:
        description: Token expiration time
        type: string
      token:
        description: JWT authentication token
        type: string
    type: object
  apicommon.MessageSignature:
    properties:
      address:
        description: Blockchain address
        example: deadbeef
        format: hex
        type: string
      payload:
        description: Message payload bytes
        example: aGVsbG8gd29ybGQ=
        format: base64
        type: string
      signature:
        description: Cryptographic signature
        example: deadbeef
        format: hex
        type: string
    type: object
  apicommon.OAuthLoginResponse:
    properties:
      expirity:
        description: Token expiration time
        type: string
      registered:
        description: Whether the user had to be  registered
        type: boolean
      token:
        description: JWT authentication token
        type: string
    type: object
  apicommon.OrgMember:
    properties:
      birthDate:
        description: Member's date of birth in format YYYY-MM-DD
        type: string
      email:
        description: Member's email address
        type: string
      id:
        description: Member's internal unique internal ID
        type: string
      memberNumber:
        description: Unique member number as defined by the organization
        type: string
      name:
        description: Member's name
        type: string
      nationalId:
        description: Member's National ID No
        type: string
      other:
        additionalProperties: {}
        description: Additional custom fields
        type: object
      password:
        description: Member's password (for authentication)
        type: string
      phone:
        description: Member's phone number
        type: string
      surname:
        description: Member's surname
        type: string
    type: object
  apicommon.OrganizationAddMetaRequest:
    properties:
      meta:
        additionalProperties: {}
        description: Set of key-value pairs to add or update in the organization's
          meta information
        type: object
    type: object
  apicommon.OrganizationAddresses:
    properties:
      addresses:
        description: List of organization blockchain addresses
        items:
          items:
            type: integer
          type: array
        type: array
    type: object
  apicommon.OrganizationCensus:
    properties:
      authFields:
        description: Optional for defining which member data should be used for authentication
        items:
          $ref: '#/definitions/db.OrgMemberAuthField'
        type: array
      censusId:
        description: Unique identifier for the census
        type: string
      groupID:
        description: Optional for creating a census based on an organization member
          group
        type: string
      orgAddress:
        description: Organization address
        items:
          type: integer
        type: array
      size:
        description: Size of the census
        type: integer
      twoFaFields:
        description: Optional for defining which member data should be used for two-factor
          authentication
        items:
          $ref: '#/definitions/db.OrgMemberTwoFaField'
        type: array
      type:
        allOf:
        - $ref: '#/definitions/db.CensusType'
        description: Type of census
    type: object
  apicommon.OrganizationCensuses:
    properties:
      censuses:
        description: List of organization censuses
        items:
          $ref: '#/definitions/apicommon.OrganizationCensus'
        type: array
    type: object
  apicommon.OrganizationDeleteMetaRequest:
    properties:
      keys:
        description: List of keys to delete from the organization's meta information
        items:
          type: string
        type: array
    type: object
  apicommon.OrganizationInfo:
    properties:
      active:
        description: Whether the organization is active
        type: boolean
      address:
        description: The organization's blockchain address
        items:
          type: integer
        type: array
      color:
        description: The organization's brand color in hex format
        type: string
      communications:
        description: Whether the organization has enabled communications
        type: boolean
      counters:
        allOf:
        - $ref: '#/definitions/apicommon.SubscriptionUsage'
        description: Usage counters for the organization
      country:
        description: The country where the organization is based
        type: string
      createdAt:
        description: Creation timestamp in RFC3339 format
        type: string
      meta:
        additionalProperties: {}
        description: Arbitrary key value fields with metadata regarding the organization
        type: object
      parent:
        allOf:
        - $ref: '#/definitions/apicommon.OrganizationInfo'
        description: Parent organization if this is a sub-organization
      size:
        description: The size category of the organization
        type: string
      subdomain:
        description: The organization's subdomain
        type: string
      subscription:
        allOf:
        - $ref: '#/definitions/apicommon.SubscriptionDetails'
        description: Subscription details for the organization
      timezone:
        description: The organization's timezone
        type: string
      type:
        description: The type of organization
        type: string
      website:
        description: The organization's website URL
        type: string
    type: object
  apicommon.OrganizationInvite:
    properties:
      email:
        description: Email address of the invitee
        type: string
      expiration:
        description: Expiration time of the invitation
        type: string
      id:
        description: Unique identifier for the invitation
        type: string
      role:
        allOf:
        - $ref: '#/definitions/db.UserRole'
        description: Role to be assigned to the invitee
    type: object
  apicommon.OrganizationInviteList:
    properties:
      pending:
        description: List of pending invitations
        items:
          $ref: '#/definitions/apicommon.OrganizationInvite'
        type: array
    type: object
  apicommon.OrganizationMemberGroupInfo:
    properties:
      censusIds:
        description: List of census IDs associated with the group
        items:
          type: string
        type: array
      createdAt:
        description: Creation timestamp
        type: string
      description:
        description: Description of the group
        type: string
      id:
        description: Unique identifier for the group
        type: string
      memberIds:
        description: List of member IDs in the group
        items:
          type: string
        type: array
      membersCount:
        description: Count of members in the group
        type: integer
      title:
        description: Title of the group
        type: string
      updatedAt:
        description: Last updated timestamp
        type: string
    type: object
  apicommon.OrganizationMemberGroupsResponse:
    properties:
      currentPage:
        description: Current page number
        type: integer
      groups:
        description: List of organization member groups
        items:
          $ref: '#/definitions/apicommon.OrganizationMemberGroupInfo'
        type: array
      totalPages:
        description: Total number of pages
        type: integer
    type: object
  apicommon.OrganizationMembersResponse:
    properties:
      members:
        description: Total number of members in the organization
        items:
          $ref: '#/definitions/apicommon.OrgMember'
        type: array
      page:
        description: Current page number
        type: integer
      pages:
        description: Total number of pages available
        type: integer
    type: object
  apicommon.OrganizationMetaResponse:
    properties:
      meta:
        additionalProperties: {}
        description: Meta information of the organization
        type: object
    type: object
  apicommon.OrganizationRole:
    properties:
      name:
        description: Human-readable name of the role
        type: string
      organizationWritePermission:
        description: Whether this role has organization write permission
        type: boolean
      processWritePermission:
        description: Whether this role has process write permission
        type: boolean
      role:
        description: Role identifier
        type: string
    type: object
  apicommon.OrganizationRoleList:
    properties:
      roles:
        description: List of organization roles
        items:
          $ref: '#/definitions/apicommon.OrganizationRole'
        type: array
    type: object
  apicommon.OrganizationSubscriptionInfo:
    properties:
      plan:
        allOf:
        - $ref: '#/definitions/apicommon.SubscriptionPlan'
        description: Subscription plan details
      subscriptionDetails:
        allOf:
        - $ref: '#/definitions/apicommon.SubscriptionDetails'
        description: Subscription details
      usage:
        allOf:
        - $ref: '#/definitions/apicommon.SubscriptionUsage'
        description: Current usage metrics
    type: object
  apicommon.OrganizationType:
    properties:
      name:
        description: Human-readable name of the type
        type: string
      type:
        description: Type identifier
        type: string
    type: object
  apicommon.OrganizationTypeList:
    properties:
      types:
        description: List of organization types
        items:
          $ref: '#/definitions/apicommon.OrganizationType'
        type: array
    type: object
  apicommon.OrganizationUser:
    properties:
      info:
        allOf:
        - $ref: '#/definitions/apicommon.UserInfo'
        description: User information
      role:
        description: The role of the user in the organization
        type: string
    type: object
  apicommon.OrganizationUsers:
    properties:
      users:
        description: List of organization users
        items:
          $ref: '#/definitions/apicommon.OrganizationUser'
        type: array
    type: object
  apicommon.PublishCensusGroupRequest:
    properties:
      authFields:
        description: Optional for defining which member data should be used for authentication
        items:
          $ref: '#/definitions/db.OrgMemberAuthField'
        type: array
      twoFaFields:
        description: Optional for defining which member data should be used for two-factor
          authentication
        items:
          $ref: '#/definitions/db.OrgMemberTwoFaField'
        type: array
    type: object
  apicommon.PublishedCensusResponse:
    properties:
      root:
        description: Merkle root of the census
        example: deadbeef
        format: hex
        type: string
      size:
        description: Size of the published census
        type: integer
      uri:
        description: URI of the published census
        type: string
    type: object
  apicommon.SubscriptionCheckout:
    properties:
      address:
        description: Organization address
        items:
          type: integer
        type: array
      billingPeriod:
        description: Billing period (e.g., "month" or "year")
        type: string
      locale:
        description: Locale for the checkout page
        type: string
      lookupKey:
        description: Plan lookup key
        type: integer
      returnURL:
        description: URL to return to after checkout
        type: string
    type: object
  apicommon.SubscriptionDetails:
    properties:
      active:
        description: Whether the subscription is active
        type: boolean
      email:
        description: Email associated with the subscription
        type: string
      lastPaymentDate:
        description: Date of the last payment
        type: string
      maxCensusSize:
        description: Maximum census size allowed
        type: integer
      planId:
        description: ID of the subscription plan
        type: integer
      renewalDate:
        description: Date when the subscription will renew
        type: string
      startDate:
        description: Date when the subscription started
        type: string
    type: object
  apicommon.SubscriptionFeatures:
    properties:
      2FAemail:
        description: Two-factor authentication email limit
        type: integer
      2FAsms:
        description: Two-factor authentication sms limit
        type: integer
      anonymous:
        description: Whether anonymous voting is available
        type: boolean
      emailReminder:
        description: Whether email reminders are available
        type: boolean
      liveResults:
        description: Whether live results are available
        type: boolean
      liveStreaming:
        description: Whether live streaming is available
        type: boolean
      overwrite:
        description: Whether census overwrite is allowed
        type: boolean
      personalization:
        description: Whether UI personalization is available
        type: boolean
      phoneSupport:
        description: Whether eligible for phone support
        type: boolean
      whiteLabel:
        description: Whether white labeling is available
        type: boolean
    type: object
  apicommon.SubscriptionPlan:
    properties:
      default:
        description: Whether this is the default plan
        type: boolean
      features:
        allOf:
        - $ref: '#/definitions/apicommon.SubscriptionFeatures'
        description: Features available in this plan
      id:
        description: Unique identifier for the plan
        type: integer
      monthlyPrice:
        description: Monthly price
        type: integer
      name:
        description: Human-readable name of the plan
        type: string
      organization:
        allOf:
        - $ref: '#/definitions/apicommon.SubscriptionPlanLimits'
        description: Organization limits for this plan
      startingPrice:
        description: Starting price in cents
        type: integer
      stripeId:
        description: Stripe product ID
        type: string
      stripeMonthlyPriceId:
        description: Stripe monthly price ID
        type: string
      stripePriceId:
        description: Stripe price ID
        type: string
      stripeYearlyPriceId:
        description: Stripe yearly price ID
        type: string
      votingTypes:
        allOf:
        - $ref: '#/definitions/apicommon.SubscriptionVotingTypes'
        description: Voting types available in this plan
      yearlyPrice:
        description: Yearly price
        type: integer
    type: object
  apicommon.SubscriptionPlanLimits:
    properties:
      customPlan:
        description: Whether this is a custom plan
        type: boolean
      customURL:
        description: Whether custom URLs are allowed
        type: boolean
      drafts:
        description: Whether draft processes allowed
        type: boolean
      maxCensus:
        description: Maximum number of census allowed
        type: integer
      maxDaysDuration:
        description: Maximum duration of voting processes in days
        type: integer
      maxProcesses:
        description: Maximum number of voting processes allowed
        type: integer
      subOrgs:
        description: Maximum number of sub-organizations allowed
        type: integer
      teamMembers:
        description: Maximum number of users allowed
        type: integer
    type: object
  apicommon.SubscriptionUsage:
    properties:
      processes:
        description: Number of voting processes created
        type: integer
      sentEmails:
        description: Number of emails sent
        type: integer
      sentSMS:
        description: Number of SMS messages sent
        type: integer
      subOrgs:
        description: Number of sub-organizations created
        type: integer
      users:
        description: Number of users in the organization
        type: integer
    type: object
  apicommon.SubscriptionVotingTypes:
    properties:
      approval:
        description: Whether approval voting is available
        type: boolean
      cumulative:
        description: Whether cumulative voting is available
        type: boolean
      multiple:
        description: Whether multiple choice voting is available
        type: boolean
      ranked:
        description: Whether ranked choice voting is available
        type: boolean
      single:
        description: Whether single choice voting is available
        type: boolean
      weighted:
        description: Whether weighted voting is available
        type: boolean
    type: object
  apicommon.TransactionData:
    properties:
      address:
        description: Blockchain address
        example: deadbeef
        format: hex
        type: string
      txPayload:
        description: Transaction payload bytes
        example: aGVsbG8gd29ybGQ=
        format: base64
        type: string
    type: object
  apicommon.UpdateOrganizationMemberGroupsRequest:
    properties:
      addMembers:
        description: The IDs of the members to add to the group
        items:
          type: string
        type: array
      description:
        description: Updated Description
        type: string
      removeMembers:
        description: The IDs of the members to remove from the group
        items:
          type: string
        type: array
      title:
        description: Updated Title
        type: string
    type: object
  apicommon.UpdateOrganizationUserRoleRequest:
    properties:
      role:
        description: The new role to assign to the user
        type: string
    type: object
  apicommon.UserInfo:
    properties:
      email:
        description: User's email address
        type: string
      firstName:
        description: User's first name
        type: string
      id:
        description: User ID as generated by the backend
        type: integer
      lastName:
        description: User's last name
        type: string
      organizations:
        description: Organizations the user belongs to
        items:
          $ref: '#/definitions/apicommon.UserOrganization'
        type: array
      password:
        description: User's password (not returned in responses)
        type: string
      verified:
        description: Whether the user's email is verified
        type: boolean
    type: object
  apicommon.UserOrganization:
    properties:
      organization:
        allOf:
        - $ref: '#/definitions/apicommon.OrganizationInfo'
        description: Organization information
      role:
        description: The role of the user in the organization
        type: string
    type: object
  apicommon.UserPasswordReset:
    properties:
      code:
        description: Password reset code
        type: string
      email:
        description: User's email address
        type: string
      newPassword:
        description: New password
        type: string
    type: object
  apicommon.UserPasswordUpdate:
    properties:
      newPassword:
        description: New password
        type: string
      oldPassword:
        description: Current password
        type: string
    type: object
  apicommon.UserVerification:
    properties:
      code:
        description: Verification code
        type: string
      email:
        description: User's email address
        type: string
      expiration:
        description: Expiration time of the verification code
        type: string
      valid:
        description: Whether the verification is valid
        type: boolean
    type: object
  apicommon.ValidateMemberGroupRequest:
    properties:
      authFields:
        description: Defines which member data should be used for authentication
        items:
          $ref: '#/definitions/db.OrgMemberAuthField'
        type: array
      twoFaFields:
        description: Defines which member data should be used for two-factor authentication
        items:
          $ref: '#/definitions/db.OrgMemberTwoFaField'
        type: array
    type: object
  db.BulkCensusParticipantStatus:
    properties:
      added:
        type: integer
      progress:
        type: integer
      total:
        type: integer
    type: object
  db.Census:
    properties:
      authFields:
        items:
          $ref: '#/definitions/db.OrgMemberAuthField'
        type: array
      createdAt:
        type: string
      groupId:
        type: string
      id:
        type: string
      orgAddress:
        items:
          type: integer
        type: array
      published:
        $ref: '#/definitions/db.PublishedCensus'
      size:
        type: integer
      twoFaFields:
        items:
          $ref: '#/definitions/db.OrgMemberTwoFaField'
        type: array
      type:
        $ref: '#/definitions/db.CensusType'
      updatedAt:
        type: string
    type: object
  db.CensusType:
    enum:
    - auth
    - mail
    - sms
    - sms_or_mail
    type: string
    x-enum-varnames:
    - CensusTypeAuthOnly
    - CensusTypeMail
    - CensusTypeSMS
    - CensusTypeSMSorMail
  db.Features:
    properties:
      2FAemail:
        type: integer
      2FAsms:
        type: integer
      anonymous:
        type: boolean
      emailReminder:
        type: boolean
      liveResults:
        type: boolean
      liveStreaming:
        type: boolean
      overwrite:
        type: boolean
      personalization:
        type: boolean
      phoneSupport:
        type: boolean
      whiteLabel:
        type: boolean
    type: object
  db.JobType:
    enum:
    - org_members
    - census_participants
    type: string
    x-enum-varnames:
    - JobTypeOrgMembers
    - JobTypeCensusParticipants
  db.OrgMemberAuthField:
    enum:
    - name
    - surname
    - memberNumber
    - nationalId
    - birthDate
    type: string
    x-enum-varnames:
    - OrgMemberAuthFieldsName
    - OrgMemberAuthFieldsSurname
    - OrgMemberAuthFieldsMemberNumber
    - OrgMemberAuthFieldsNationalID
    - OrgMemberAuthFieldsBirthDate
  db.OrgMemberTwoFaField:
    enum:
    - email
    - phone
    type: string
    x-enum-varnames:
    - OrgMemberTwoFaFieldEmail
    - OrgMemberTwoFaFieldPhone
  db.Plan:
    properties:
      default:
        type: boolean
      features:
        $ref: '#/definitions/db.Features'
      id:
        type: integer
      monthlyPrice:
        type: integer
      name:
        type: string
      organization:
        $ref: '#/definitions/db.PlanLimits'
      stripeID:
        type: string
      stripeMonthlyPriceID:
        type: string
      stripeYearlyPriceID:
        type: string
      votingTypes:
        $ref: '#/definitions/db.VotingTypes'
      yearlyPrice:
        type: integer
    type: object
  db.PlanLimits:
    properties:
      customPlan:
        type: boolean
      customURL:
        type: boolean
      drafts:
        type: boolean
      maxCensus:
        type: integer
      maxDaysDuration:
        description: Max process duration in days
        type: integer
      maxProcesses:
        type: integer
      subOrgs:
        type: integer
      teamMembers:
        type: integer
    type: object
  db.Process:
    properties:
      census:
        $ref: '#/definitions/db.Census'
      id:
        example: deadbeef
        format: hex
        type: string
      metadata:
        example: aGVsbG8gd29ybGQ=
        format: base64
        type: string
      orgAdress:
        items:
          type: integer
        type: array
    type: object
  db.ProcessesBundle:
    properties:
      census:
        allOf:
        - $ref: '#/definitions/db.Census'
        description: The census associated with this bundle
      id:
        description: Unique identifier for the bundle
        type: string
      orgAddress:
        description: The organization that owns this bundle
        items:
          type: integer
        type: array
      processes:
        description: Array of process IDs included in this bundle
        example:
        - deadbeef
        items:
          format: hex
          type: string
        type: array
    type: object
  db.PublishedCensus:
    properties:
      createdAt:
        type: string
      root:
        items:
          type: integer
        type: array
      uri:
        type: string
    type: object
  db.UserRole:
    enum:
    - admin
    - manager
    - viewer
    type: string
    x-enum-varnames:
    - AdminRole
    - ManagerRole
    - ViewerRole
  db.VotingTypes:
    properties:
      approval:
        type: boolean
      cumulative:
        type: boolean
      multiple:
        type: boolean
      ranked:
        type: boolean
      single:
        type: boolean
      weighted:
        type: boolean
    type: object
  errors.Error:
    properties:
      code:
        description: Error code
        type: integer
      data:
        description: Optional data to include in the error response
      err:
        description: Original error
      httpstatus:
        description: HTTP status code to return
        type: integer
      logLevel:
        description: Log level for this error (defaults to "debug")
        type: string
    type: object
  github_com_vocdoni_saas-backend_stripe.CheckoutSessionStatus:
    properties:
      customer_email:
        type: string
      status:
        type: string
      subscription_status:
        type: string
    type: object
  handlers.AuthResponse:
    properties:
      authToken:
        example: deadbeef
        format: hex
        type: string
      signature:
        example: deadbeef
        format: hex
        type: string
    type: object
  handlers.ConsumedAddressRequest:
    properties:
      authToken:
        example: deadbeef
        format: hex
        type: string
    type: object
  handlers.ConsumedAddressResponse:
    properties:
      at:
        type: string
      authToken:
        example: deadbeef
        format: hex
        type: string
      nullifier:
        example: deadbeef
        format: hex
        type: string
    type: object
  handlers.SignRequest:
    properties:
      authToken:
        example: deadbeef
        format: hex
        type: string
      electionId:
        example: deadbeef
        format: hex
        type: string
      payload:
        type: string
      tokenR:
        example: deadbeef
        format: hex
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: info@vocdoni.io
    name: API Support
    url: https://vocdoni.io
  description: API for Vocdoni SaaS Backend
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Vocdoni SaaS API
  version: "1.0"
paths:
  /auth/addresses:
    get:
      consumes:
      - application/json
      description: Get the list of organization addresses where the user has write
        access
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationAddresses'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: No organizations found
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get writable organization addresses
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and get a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Login to get a JWT token
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh the JWT token for an authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Refresh JWT token
      tags:
      - auth
  /census:
    post:
      consumes:
      - application/json
      description: |-
        Create a new census for an organization. Requires Manager/Admin role.
        Creates either a regular census or a group-based census if GroupID is provided.
        Validates that either AuthFields or TwoFaFields are provided and checks for duplicates or empty fields.
      parameters:
      - description: Census information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.CreateCensusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the created census ID
          schema:
            $ref: '#/definitions/apicommon.CreateCensusResponse'
        "400":
          description: Invalid input data or missing required fields
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Create a new census
      tags:
      - census
  /census/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve census information by ID. Returns census type, organization
        address, and creation time.
      parameters:
      - description: Census ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationCensus'
        "400":
          description: Invalid census ID
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Census not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get census information
      tags:
      - census
    post:
      consumes:
      - application/json
      description: Add multiple participants to a census. Requires Manager/Admin role.
      parameters:
      - description: Census ID
        in: path
        name: id
        required: true
        type: string
      - description: Process asynchronously and return job ID
        in: query
        name: async
        type: boolean
      - description: Participants to add
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.AddMembersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.AddMembersResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Census not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Add participants to a census
      tags:
      - census
  /census/{id}/participants:
    get:
      consumes:
      - application/json
      description: Retrieve participants of a census by ID. Requires Manager/Admin
        role.
      parameters:
      - description: Census ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.CensusParticipantsResponse'
        "400":
          description: Invalid census ID
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Census not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get census participants
      tags:
      - census
  /census/{id}/publish:
    post:
      consumes:
      - application/json
      description: Publish a census for voting. Requires Manager/Admin role. Returns
        published census with credentials.
      parameters:
      - description: Census ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.PublishedCensusResponse'
        "400":
          description: Invalid census ID
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Census not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Publish a census for voting
      tags:
      - census
  /census/{id}/publish/group/{groupid}:
    post:
      consumes:
      - application/json
      description: |-
        Publish a census based on a specific organization members group for voting. Requires Manager/Admin role.
        Returns published census with credentials.
      parameters:
      - description: Census ID
        in: path
        name: id
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: string
      - description: Census authentication configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.PublishCensusGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.PublishedCensusResponse'
        "400":
          description: Invalid census ID or group ID
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Census not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Publish a group-based census for voting
      tags:
      - census
  /census/job/{jobid}:
    get:
      consumes:
      - application/json
      description: |-
        Check the progress of a job to add participants to a census. Returns the progress of the job.
        If the job is completed, the job is deleted after 60 seconds.
      parameters:
      - description: Job ID
        in: path
        name: jobid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.BulkCensusParticipantStatus'
        "400":
          description: Invalid job ID
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Job not found
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Check the progress of adding participants
      tags:
      - census
  /oauth/login:
    post:
      consumes:
      - application/json
      description: Register/Authenticate a user and get a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OAuthLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Login using OAuth service
      tags:
      - auth
  /organizations:
    post:
      consumes:
      - application/json
      description: |-
        Create a new organization. If the organization is a suborganization, the parent organization must be
        specified in the request body, and the user must be an admin of the parent. If the parent organization
        is already a suborganization, an error is returned.
      parameters:
      - description: Organization information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.OrganizationInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationInfo'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Parent organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Create a new organization
      tags:
      - organizations
  /organizations/{address}:
    get:
      consumes:
      - application/json
      description: Get information about an organization
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationInfo'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get organization information
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: |-
        Update the information of an organization.
        Only the admin of the organization can update the information.
        Only certain fields can be updated, and they will be updated only if they are not empty.
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Organization information to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.OrganizationInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Update organization information
      tags:
      - organizations
  /organizations/{address}/censuses:
    get:
      consumes:
      - application/json
      description: Get the list of censuses for an organization
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationCensuses'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get organization censuses
      tags:
      - organizations
  /organizations/{address}/groups:
    get:
      consumes:
      - application/json
      description: |-
        Get the list of groups and their info of the organization
        Does not return the members of the groups, only the groups themselves.
        Needs admin or manager role
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationMemberGroupsResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get organization member groups
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: |-
        Create an organization member group with the given members or all members
        Needs admin or manager role
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Group info to create
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/apicommon.CreateOrganizationMemberGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationMemberGroupInfo'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Create an organization member group
      tags:
      - organizations
  /organizations/{address}/groups/{groupID}:
    delete:
      consumes:
      - application/json
      description: Delete an organization member group by its ID
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization or group not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Delete an organization member group
      tags:
      - organizations
    get:
      consumes:
      - application/json
      description: |-
        Get the information of an organization member group by its ID
        Needs admin or manager role
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationMemberGroupInfo'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization or group not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get the information of an organization member group
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: |-
        Update an organization member group changing the info, and adding or removing members
        Needs admin or manager role
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Group info to update
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/apicommon.UpdateOrganizationMemberGroupsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization or group not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Update an organization member group
      tags:
      - organizations
  /organizations/{address}/groups/{groupID}/members:
    get:
      consumes:
      - application/json
      description: |-
        Get the list of members with details of an organization member group
        Needs admin or manager role
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.ListOrganizationMemberGroupResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization or group not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get the list of members with details of an organization member group
      tags:
      - organizations
  /organizations/{address}/groups/{groupID}/validate:
    post:
      consumes:
      - application/json
      description: Checks the AuthFields for duplicates or empty fields and the TwoFaFields
        for empty ones.
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Members validation request
        in: body
        name: members
        required: true
        schema:
          $ref: '#/definitions/apicommon.ValidateMemberGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization or group not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Validate organization group members data
      tags:
      - organizations
  /organizations/{address}/jobs:
    get:
      consumes:
      - application/json
      description: Get the list of import jobs for an organization with pagination
        support
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: pageSize
        type: integer
      - description: Filter by job type (org_members or census_participants)
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.JobsResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get organization jobs
      tags:
      - organizations
  /organizations/{address}/member:
    delete:
      consumes:
      - application/json
      description: Delete multiple members from an organization or all members. Requires
        Manager/Admin role.
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Member IDs to delete or all flag
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.DeleteMembersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.DeleteMembersResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Delete organization members
      tags:
      - organizations
  /organizations/{address}/members:
    get:
      consumes:
      - application/json
      description: Retrieve all members of an organization with pagination support
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: pageSize
        type: integer
      - description: Search term for member properties
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationMembersResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get organization members
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Add multiple members to an organization. Requires Manager/Admin
        role.
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Process asynchronously and return job ID
        in: query
        name: async
        type: boolean
      - description: Members to add
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.AddMembersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.AddMembersResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Add members to an organization
      tags:
      - organizations
  /organizations/{address}/members/job/{jobid}:
    get:
      consumes:
      - application/json
      description: |-
        Check the progress of a job to add members to an organization. Returns the progress of the job.
        If the job is completed, the job is deleted after 60 seconds.
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Job ID
        in: path
        name: jobid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.AddMembersJobResponse'
        "400":
          description: Invalid job ID
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Job not found
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Check the progress of adding members
      tags:
      - organizations
  /organizations/{address}/subscription:
    get:
      consumes:
      - application/json
      description: Get the subscription information for an organization
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationSubscriptionInfo'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found or no subscription
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get organization subscription
      tags:
      - organizations
  /organizations/{address}/ticket:
    post:
      consumes:
      - application/json
      description: Create a new ticket for an organization. The user must have some
        role in the organization (any role).
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Ticket request information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.CreateOrganizationTicketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Create a new ticket for an organization
      tags:
      - organizations
  /organizations/{address}/users:
    get:
      consumes:
      - application/json
      description: Get the list of users with their roles in the organization
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationUsers'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get organization users
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: |-
        Invite a new user to an organization. Only the admin of the organization can invite a new user.
        It stores the invitation in the database and sends an email to the new user with the invitation code.
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Invitation information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.OrganizationInvite'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "409":
          description: User already has a role in the organization
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Invite a new user to an organization
      tags:
      - organizations
  /organizations/{address}/users/{userid}:
    delete:
      consumes:
      - application/json
      description: Remove a user from the organization. Only the admin of the organization
        can remove a user.
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: User ID
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data - User cannot remove itself
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Remove a user from the organization
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: Update the role of a user in an organization. Only the admin of
        the organization can update the role.
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: User ID
        in: path
        name: userid
        required: true
        type: string
      - description: Update user role information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UpdateOrganizationUserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Update organization user role
      tags:
      - organizations
  /organizations/{address}/users/accept:
    post:
      consumes:
      - application/json
      description: |-
        Accept an invitation to an organization. It checks if the invitation is valid and not expired, and that the
        user has no role in the organization yet. If the user does not exist, it creates a new user with the provided
        information. If the user already exists and is verified, it assigns a role to the user in the organization.
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Invitation acceptance information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.AcceptOrganizationInvitation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized or invalid invitation
          schema:
            $ref: '#/definitions/errors.Error'
        "409":
          description: User already has a role in the organization
          schema:
            $ref: '#/definitions/errors.Error'
        "410":
          description: Invitation expired
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Accept an invitation to an organization
      tags:
      - organizations
  /organizations/{address}/users/pending:
    get:
      consumes:
      - application/json
      description: Get the list of pending invitations for an organization
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationInviteList'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get pending organization users
      tags:
      - organizations
  /organizations/{address}/users/pending/{invitationID}:
    delete:
      consumes:
      - application/json
      description: |-
        Delete a pending invitation to an organization by email.
        Only the admin of the organization can delete an invitation.
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Invitation ID
        in: path
        name: invitationID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid data - invitation not found
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Delete a pending invitation to an organization
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: |-
        Update the code, link and expiration time of a pending invitation to an organization by email.
        Resend the invitation email.
        Only the admin of the organization can update an invitation.
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      - description: Invitation ID
        in: path
        name: invitationID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid data - invitation not found
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Update a pending invitation to an organization
      tags:
      - organizations
  /organizations/{orgAddress}/meta:
    delete:
      consumes:
      - application/json
      description: Deletes a set of keys from the meta information of an organization.
      parameters:
      - description: Organization address
        in: path
        name: orgAddress
        required: true
        type: string
      - description: Keys to delete from the organization meta
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.OrganizationDeleteMetaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden - User is not a manager or admin of the organization
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "422":
          description: Invalid meta information
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Delete organization meta information
      tags:
      - organizations
    get:
      consumes:
      - application/json
      description: Retrieves the meta information of an organization. Requires Manager/Admin
        role.
      parameters:
      - description: Organization address
        in: path
        name: orgAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Organization meta information
          schema:
            $ref: '#/definitions/apicommon.OrganizationMetaResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden - User is not a manager or admin of the organization
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get organization meta information
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Overwrite the meta information of an organization. Requires Manager/Admin
        role.
      parameters:
      - description: Organization address
        in: path
        name: orgAddress
        required: true
        type: string
      - description: Meta information to add to the organization
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.OrganizationAddMetaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden - User is not a manager or admin of the organization
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "422":
          description: Invalid meta information
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Add meta information to an organization
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: |-
        Updates existing or adds new key/value pairs in the meta information of an organization.
        Has only one layer of depth. If a second layer document is provided, for example meta.doc = [a,b,c],
        the entire document will be updated.
        Requires Manager/Admin role.
      parameters:
      - description: Organization address
        in: path
        name: orgAddress
        required: true
        type: string
      - description: Meta information to update in the organization
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.OrganizationAddMetaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden - User is not a manager or admin of the organization
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "422":
          description: Invalid meta information
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Update organization meta information
      tags:
      - organizations
  /organizations/roles:
    get:
      consumes:
      - application/json
      description: Get the list of available roles that can be assigned to a user
        of an organization
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationRoleList'
      summary: Get available organization user roles
      tags:
      - organizations
  /organizations/types:
    get:
      consumes:
      - application/json
      description: Get the list of available organization types that can be assigned
        to an organization
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.OrganizationTypeList'
      summary: Get available organization types
      tags:
      - organizations
  /plans:
    get:
      consumes:
      - application/json
      description: Get the list of available subscription plans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Plan'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get all subscription plans
      tags:
      - plans
  /plans/{planID}:
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific subscription plan
      parameters:
      - description: Plan ID
        in: path
        name: planID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Plan'
        "400":
          description: Invalid plan ID
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Plan not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get plan information
      tags:
      - plans
  /process/{processId}:
    get:
      consumes:
      - application/json
      description: Retrieve voting process information by ID. Returns process details
        including census and metadata.
      parameters:
      - description: Process ID
        in: path
        name: processId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Process'
        "400":
          description: Invalid process ID
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Process not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get process information
      tags:
      - process
    post:
      consumes:
      - application/json
      description: Create a new voting process. Requires Manager/Admin role.
      parameters:
      - description: Process ID
        in: path
        name: processId
        required: true
        type: string
      - description: Process creation information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.CreateProcessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Published census not found
          schema:
            $ref: '#/definitions/errors.Error'
        "409":
          description: Process already exists
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Create a new voting process
      tags:
      - process
  /process/{processId}/sign-info:
    post:
      consumes:
      - application/json
      description: |-
        Get the address used to sign a process. Requires a verified token. Returns the address, nullifier,
        and timestamp of the consumption.
      parameters:
      - description: Process ID
        in: path
        name: processId
        required: true
        type: string
      - description: Request with auth token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ConsumedAddressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ConsumedAddressResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized or invalid token
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Process not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get the address used to sign a process
      tags:
      - process
  /process/bundle:
    post:
      consumes:
      - application/json
      description: |-
        Create a new process bundle with the specified census and optional list of processes. Requires
        Manager/Admin role for the organization that owns the census. The census root will be the same as the
        account's public key.
      parameters:
      - description: Process bundle creation information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.CreateProcessBundleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.CreateProcessBundleResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Census not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Create a new process bundle
      tags:
      - process
  /process/bundle/{bundleId}:
    get:
      consumes:
      - application/json
      description: |-
        Retrieve process bundle information by ID. Returns bundle details including the associated census,
        census root, organization address, and list of processes.
      parameters:
      - description: Bundle ID
        in: path
        name: bundleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.ProcessesBundle'
        "400":
          description: Invalid bundle ID
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Bundle not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get process bundle information
      tags:
      - process
    put:
      consumes:
      - application/json
      description: |-
        Add additional processes to an existing bundle. Requires Manager/Admin role for the organization
        that owns the bundle.
      parameters:
      - description: Bundle ID
        in: path
        name: bundleId
        required: true
        type: string
      - description: Processes to add
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.AddProcessesToBundleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.CreateProcessBundleResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Bundle or census not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Add processes to an existing bundle
      tags:
      - process
  /process/bundle/{bundleId}/{participantId}:
    get:
      consumes:
      - application/json
      description: |-
        Retrieve process information for a participant in a process bundle. Returns process details including
        the census and metadata.
      parameters:
      - description: Bundle ID
        in: path
        name: bundleId
        required: true
        type: string
      - description: Participant ID
        in: path
        name: participantID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Invalid bundle ID or participant ID
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Bundle not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get participant information for a process bundle
      tags:
      - process
  /process/bundle/{bundleId}/auth/{step}:
    post:
      consumes:
      - application/json
      description: |-
        Handle authentication for a process bundle. There are two steps in the authentication process:
        - Step 0: The user sends the participant ID and contact information (email or phone).
        If valid, the server sends a challenge to the user with a token.
        - Step 1: The user sends the token and challenge solution back to the server.
        If valid, the token is marked as verified and returned.
        For auth-only censuses, verification may not require a challenge solution.
      parameters:
      - description: Bundle ID
        in: path
        name: bundleId
        required: true
        type: string
      - description: Authentication step (0 or 1)
        in: path
        name: step
        required: true
        type: string
      - description: Authentication request (varies by step)
        in: body
        name: request
        required: true
        schema: {}
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Bundle not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Authenticate for a process bundle
      tags:
      - process
  /process/bundle/{bundleId}/sign:
    post:
      consumes:
      - application/json
      description: |-
        Sign a process in a bundle. Requires a verified token. The server signs the address with the user data
        and returns the signature. Once signed, the process is marked as consumed and cannot be signed again.
        The signing process includes verifying that the participant is in the census, that the process is part of
        the bundle, and that the authentication token is valid and verified.
      parameters:
      - description: Bundle ID
        in: path
        name: bundleId
        required: true
        type: string
      - description: Sign request with process ID, auth token, and payload (address)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.SignRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized or invalid token
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Bundle not found or process not in bundle
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Sign a process in a bundle
      tags:
      - process
  /storage:
    post:
      consumes:
      - multipart/form-data
      description: |-
        Upload images through a multipart form. Expects the request to contain a "file" field with one or more
        files to be uploaded.
      parameters:
      - description: Image file(s) to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: URLs of uploaded images
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Upload images
      tags:
      - storage
  /storage/{objectName}:
    get:
      description: Download an image inline. Retrieves the object from storage and
        displays it in the browser.
      parameters:
      - description: Object name
        in: path
        name: objectName
        required: true
        type: string
      produces:
      - image/jpeg
      - image/png
      responses:
        "200":
          description: Image file
          schema:
            type: file
        "400":
          description: Invalid object name
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Object not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Download an image
      tags:
      - storage
  /subscriptions/{address}/portal:
    get:
      consumes:
      - application/json
      description: Create a Stripe customer portal session for managing subscriptions
      parameters:
      - description: Organization address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Contains portalURL
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Create a subscription portal session
      tags:
      - plans
  /subscriptions/checkout:
    post:
      consumes:
      - application/json
      description: Create a new Stripe checkout session for subscription purchases
      parameters:
      - description: Checkout information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.SubscriptionCheckout'
      produces:
      - application/json
      responses:
        "200":
          description: Contains clientSecret and sessionID
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization or plan not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Create a subscription checkout session
      tags:
      - plans
  /subscriptions/checkout/{sessionID}:
    get:
      consumes:
      - application/json
      description: Retrieve the status of a Stripe checkout session
      parameters:
      - description: Checkout session ID
        in: path
        name: sessionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_vocdoni_saas-backend_stripe.CheckoutSessionStatus'
        "400":
          description: Invalid session ID
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get checkout session status
      tags:
      - plans
  /subscriptions/webhook:
    post:
      consumes:
      - application/json
      description: |-
        Process incoming webhook events from Stripe for subscription management. Handles subscription creation,
        updates, deletions, and payment events with idempotency and proper error handling.
      parameters:
      - description: Stripe webhook payload
        in: body
        name: body
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Handle Stripe webhook events
      tags:
      - plans
  /transactions:
    post:
      consumes:
      - application/json
      description: Sign a transaction with the organization's private key. The user
        must have a role in the organization.
      parameters:
      - description: Transaction data to sign
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.TransactionData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.TransactionData'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Sign a transaction
      tags:
      - transactions
  /transactions/message:
    post:
      consumes:
      - application/json
      description: Sign a message with the organization's private key. The user must
        have admin role for the organization.
      parameters:
      - description: Message to sign
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.MessageSignature'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.MessageSignature'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Sign a message
      tags:
      - transactions
  /users:
    post:
      consumes:
      - application/json
      description: Register a new user with email, password, and personal information
      parameters:
      - description: User registration information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Register a new user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get information about the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.UserInfo'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Get user information
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update information for the authenticated user
      parameters:
      - description: User information to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.LoginResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - users
  /users/password:
    put:
      consumes:
      - application/json
      description: Update the password for the authenticated user
      parameters:
      - description: Password update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserPasswordUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized or old password does not match
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - users
  /users/recovery:
    post:
      consumes:
      - application/json
      description: Request a password recovery code for a user
      parameters:
      - description: User email information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Recover user password
      tags:
      - users
  /users/reset:
    post:
      consumes:
      - application/json
      description: Reset a user's password using a verification code
      parameters:
      - description: Password reset information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserPasswordReset'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized or invalid verification code
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Reset user password
      tags:
      - users
  /users/verify:
    post:
      consumes:
      - application/json
      description: Verify a user account with the verification code
      parameters:
      - description: Verification information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserVerification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.LoginResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "409":
          description: User already verified
          schema:
            $ref: '#/definitions/errors.Error'
        "410":
          description: Verification code expired
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Verify user account
      tags:
      - users
  /users/verify/code:
    get:
      consumes:
      - application/json
      description: Get information about a user's verification code
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicommon.UserVerification'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/errors.Error'
        "409":
          description: User already verified
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get verification code information
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Resend a verification code to the user's email
      parameters:
      - description: User email information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apicommon.UserVerification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "409":
          description: User already verified or verification code still valid
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Resend verification code
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
