package test

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"
	"strings"
	"time"

	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/wait"
)

// StartMongoContainer creates and starts an instance of the mongodb container
// configured as a replica set for transaction support
func StartMongoContainer(ctx context.Context) (testcontainers.Container, error) {
	// MongoDB replica set initialization script
	initScript := `
	#!/bin/bash
	echo "Starting replica set initialization"
	mongosh --eval "
		rs.initiate({
			_id: 'rs0',
			members: [
				{ _id: 0, host: 'localhost:27017' }
			]
		})
	"
	echo "Replica set initialized"
	`

	container, err := testcontainers.GenericContainer(ctx,
		testcontainers.GenericContainerRequest{
			ContainerRequest: testcontainers.ContainerRequest{
				Image:        "mongo",
				ExposedPorts: []string{"27017/tcp"},
				Cmd:          []string{"--replSet", "rs0", "--bind_ip_all"},
				WaitingFor: wait.ForAll(
					wait.ForLog("Waiting for connections"),
					wait.ForListeningPort("27017/tcp"),
				),
				Files: []testcontainers.ContainerFile{
					{
						ContainerFilePath: "/docker-entrypoint-initdb.d/init-rs.sh",
						FileMode:          0o755,
						Reader:            strings.NewReader(initScript),
					},
				},
			},
			Started: true,
		})
	if err != nil {
		return nil, err
	}

	// Wait a bit for the replica set to initialize
	time.Sleep(2 * time.Second)

	return container, nil
}

// GetMongoURIWithReplicaSet returns the MongoDB connection URI with the replica set name
// This should be used instead of directly calling container.Endpoint(ctx, "mongodb")
func GetMongoURIWithReplicaSet(ctx context.Context, container testcontainers.Container) (string, error) {
	mongoURI, err := container.Endpoint(ctx, "mongodb")
	if err != nil {
		return "", err
	}

	// Add the replica set name to the connection string
	if !strings.Contains(mongoURI, "?") {
		mongoURI += "/?replicaSet=rs0"
	} else {
		mongoURI += "&replicaSet=rs0"
	}

	return mongoURI, nil
}

//
// Copy-pasted verbatim from github.com/strikesecurity/strikememongo
//

// DBNameLen is the length of a database name generated by RandomDatabase().
// It's OK to change this, but not concurrently with calls to RandomDatabase.
const DBNameLen = 15

// DBNameChars is the set of characters used by RandomDatabase().
// It's OK to change this, but not concurrently with calls to RandomDatabase.
const DBNameChars = "abcdefghijklmnopqrstuvwxyz"

// RandomDatabaseName returns a random valid mongo database name. You can use to
// to pick a new database name for each test to isolate tests from each other
// without having to tear down the whole server.
//
// This function will panic if it cannot generate a random number.
func RandomDatabaseName() string {
	dbChars := make([]byte, DBNameLen)
	for i := 0; i < DBNameLen; i++ {
		bigN, err := rand.Int(rand.Reader, big.NewInt(int64(len(DBNameChars))))
		if err != nil {
			panic(fmt.Errorf("error getting a random int: %s", err))
		}

		dbChars[i] = DBNameChars[int(bigN.Int64())]
	}

	return string(dbChars)
}
